FUNCTION_BLOCK Halley_Fuzzy

VAR_INPUT
PROP_SOMBRA1T: REAL;
PROP_SOMBRA2T: REAL;
PROP_SOMBRA12: REAL;
PROP_CORPOT: REAL;
END_VAR

VAR_OUTPUT
HALLEY: REAL;
END_VAR

FUZZIFY PROP_SOMBRA1T
RANGE := (0.000 .. 100.000);
TERM MuitoRuim := Trapezoid (0.000, 0.000, 30.000, 40.000);
TERM Ruim := Triangle (30.000, 40.000, 50.000);
TERM Neutro := Trapezoid (40.000, 50.000, 50.000, 60.000);
TERM Bom := Triangle (50.000, 60.000, 70.000);
TERM MuitoBom := Trapezoid (60.000, 80.000, 100.000, 100.000);
END_FUZZIFY

FUZZIFY PROP_SOMBRA2T
RANGE := (0.000 .. 100.000);
TERM MuitoBom := Trapezoid (0.000, 0.000, 10.000, 20.000);
TERM Bom := Triangle (10.000, 20.000, 30.000);
TERM Neutro := Trapezoid (25.000, 40.000, 40.000, 50.000);
TERM Ruim := Triangle (35.000, 50.000, 55.000);
TERM MuitoRuim := Trapezoid (50.000, 60.000, 100.000, 100.000);
END_FUZZIFY

FUZZIFY PROP_SOMBRA12
RANGE := (0.000 .. 100.000);
TERM MuitoBom := Trapezoid (0.000, 0.000, 20.000, 30.000);
TERM Bom := Triangle (20.000, 30.000, 40.000);
TERM Neutro := Trapezoid (30.000, 50.000, 50.000, 70.000);
TERM Ruim := Triangle (60.000, 70.000, 80.000);
TERM MuitoRuim := Trapezoid (70.000, 80.000, 100.000, 100.000);
END_FUZZIFY

FUZZIFY PROP_CORPOT
RANGE := (0.000 .. 100.000);
TERM MuitoBom := Trapezoid (0.000, 0.000, 5.000, 10.000);
TERM Bom := Triangle (5.000, 15.000, 25.000);
TERM Neutro := Trapezoid (15.000, 30.000, 40.000, 40.000);
TERM Ruim := Triangle (30.000, 45.000, 45.000);
TERM MuitoRuim := Trapezoid (40.000, 50.000, 100.000, 100.000);
END_FUZZIFY

DEFUZZIFY HALLEY
RANGE := (0.000 .. 100.000);
TERM MuitoRuim := Trapezoid (0.000, 0.000, 20.000, 30.000);
TERM Ruim := Triangle (20.000, 30.000, 40.000);
TERM Neutro := Trapezoid (30.000, 50.000, 50.000, 70.000);
TERM Bom := Triangle (60.000, 70.000, 80.000);
TERM MuitoBom := Trapezoid (70.000, 80.000, 100.000, 100.000);

METHOD : COG;
ACCU : MAX;
DEFAULT := nan;
END_DEFUZZIFY

RULEBLOCK 
AND : MIN;
OR : MAX;
ACT : MIN;

RULE 1 : if PROP_SOMBRA1T is MuitoRuim then HALLEY is MuitoRuim
RULE 2 : if PROP_SOMBRA1T is Ruim then HALLEY is Ruim
RULE 3 : if PROP_SOMBRA1T is Neutro then HALLEY is Neutro
RULE 4 : if PROP_SOMBRA1T is Bom then HALLEY is Bom
RULE 5 : if PROP_SOMBRA1T is MuitoBom then HALLEY is MuitoBom
RULE 6 : if PROP_SOMBRA2T is MuitoRuim then HALLEY is MuitoRuim
RULE 7 : if PROP_SOMBRA2T is Ruim then HALLEY is Ruim
RULE 8 : if PROP_SOMBRA2T is Neutro then HALLEY is Neutro
RULE 9 : if PROP_SOMBRA2T is Bom then HALLEY is Bom
RULE 10 : if PROP_SOMBRA2T is MuitoBom then HALLEY is MuitoBom
RULE 11 : if PROP_SOMBRA12 is MuitoRuim then HALLEY is MuitoRuim
RULE 12 : if PROP_SOMBRA12 is Ruim then HALLEY is Ruim
RULE 13 : if PROP_SOMBRA12 is Neutro then HALLEY is Neutro
RULE 14 : if PROP_SOMBRA12 is Bom then HALLEY is Bom
RULE 15 : if PROP_SOMBRA12 is MuitoBom then HALLEY is MuitoBom
RULE 16 : if PROP_CORPOT is MuitoRuim then HALLEY is MuitoRuim
RULE 17 : if PROP_CORPOT is Ruim then HALLEY is Ruim
RULE 18 : if PROP_CORPOT is Neutro then HALLEY is Neutro
RULE 19 : if PROP_CORPOT is Bom then HALLEY is Bom
RULE 20 : if PROP_CORPOT is MuitoBom then HALLEY is MuitoBom
END_RULEBLOCK

END_FUNCTION_BLOCK